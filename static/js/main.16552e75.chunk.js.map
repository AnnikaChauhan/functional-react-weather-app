{"version":3,"sources":["containers/App/App.module.scss","components/CurrentWeather/CurrentWeather.module.scss","components/ForecastWeather/ForecastWeather.module.scss","components/ForecastWeather/DailyForecast/DailyForecast.module.scss","components/ForecastWeather/DailyForecast/DailyDetails/DailyDetails.module.scss","contexts/weatherContext.js","components/CurrentWeather/index.js","components/CurrentWeather/CurrentWeather.jsx","components/ForecastWeather/DailyForecast/DailyDetails/index.js","components/ForecastWeather/DailyForecast/DailyDetails/DailyDetails.jsx","components/ForecastWeather/DailyForecast/index.js","components/ForecastWeather/DailyForecast/DailyForecast.jsx","components/ForecastWeather/index.js","components/ForecastWeather/ForecastWeather.jsx","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherContext","createContext","WeatherContextProvider","props","useState","city","setCity","appid","currentWeather","setCurrentWeather","forecastWeather","setForecastWeather","fetchWeather","currentWeatherURL","forecastWeatherURL","Promise","all","fetch","then","resC","resF","json","list","filter","item","indexOf","catch","error","console","log","useEffect","Provider","value","convertKelvinToCelsius","kelvin","celsius","Number","parseFloat","toFixed","children","CurrentWeather","useContext","className","styles","container","type","onChange","e","target","placeholder","onClick","preventDefault","main","temp","DailyDetails","dailyWeather","weatherContext","details","feels_like","temp_min","temp_max","humidity","wind","speed","weather","description","DailyForecast","utc","showDetail","setShowDetail","detail","daily","dt","Date","toGMTString","substring","src","icon","alt","ForecastWeather","forecast","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.16552e75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__37HFC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CurrentWeather_container__3aSTo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecast\":\"ForecastWeather_forecast__1P9AL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"daily\":\"DailyForecast_daily__1zHiG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"details\":\"DailyDetails_details__2tDHw\"};","import React, { createContext, useState, useEffect } from 'react';\n\nconst WeatherContext = createContext();\n\nexport const WeatherContextProvider = (props) => {\n    const [city, setCity] = useState('London');\n    const [appid] = useState('0a30e476b278414999f2fa1f9e2e6e38')\n    const [currentWeather, setCurrentWeather] = useState('');\n    const [forecastWeather, setForecastWeather] = useState('');\n\n    const convertKelvinToCelsius = (kelvin) => {\n        let celsius = kelvin - 273.15;\n        celsius = Number.parseFloat(celsius).toFixed(0);\n        return celsius;\n    };\n\n    const fetchWeather = () => {\n        const currentWeatherURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${appid}`;\n        const forecastWeatherURL = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${appid}`;\n\n        Promise.all([fetch(currentWeatherURL), fetch(forecastWeatherURL)])\n            .then(([resC, resF]) => {\n                return Promise.all([resC.json(), resF.json()]);\n            })\n            .then(([resC, resF]) => {\n                setCurrentWeather(resC);\n                setForecastWeather(resF.list.filter(item => {\n                    return resF.list.indexOf(item)%8 === 0;\n                }));\n            })\n            .catch(error => {console.log(error)});\n    };\n\n    useEffect(fetchWeather, []);\n\n    return ( \n        <WeatherContext.Provider value={{city, setCity, currentWeather, forecastWeather, convertKelvinToCelsius, fetchWeather}}>\n            {props.children}\n        </WeatherContext.Provider>\n     );   \n}\n \nexport default WeatherContext;","import CurrentWeather from './CurrentWeather';\n\nexport default CurrentWeather;","import React, { useContext } from 'react';\nimport styles from './CurrentWeather.module.scss';\n\nimport WeatherContext from '../../contexts/weatherContext';\n\nconst CurrentWeather = () => {\n    const {city, setCity, fetchWeather, currentWeather, convertKelvinToCelsius} = useContext(WeatherContext);\n\n    const handleChange = (e) => {\n        setCity(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        fetchWeather();\n    }\n\n    return (\n        <section className={styles.container}>\n            <form>\n                <input type='text' value={city} onChange={handleChange} placeholder='Search City' />\n                <input type='submit' value='Go' onClick={handleSubmit}/>\n            </form>\n            {\n                currentWeather\n                ? <p>{convertKelvinToCelsius(currentWeather.main.temp)}&deg;</p>\n                : <p></p>\n            }\n        </section>\n\n    );\n}\n\nexport default CurrentWeather;","import DailyDetails from './DailyDetails';\n\nexport default DailyDetails;","import React, { useContext } from 'react';\nimport styles from './DailyDetails.module.scss';\n\nimport weatherContext from '../../../../contexts/weatherContext';\n\nconst DailyDetails = ({ dailyWeather }) => {\n    const { convertKelvinToCelsius } = useContext(weatherContext);\n\n    return (\n        <div className={styles.details}>\n            <div>\n                <p>Feels like: <span>{convertKelvinToCelsius(dailyWeather.main.feels_like)}&deg;</span></p>\n                <p>Min temperature: <span>{convertKelvinToCelsius(dailyWeather.main.temp_min)}&deg;</span></p>\n                <p>Max temperature: <span>{convertKelvinToCelsius(dailyWeather.main.temp_max)}&deg;</span></p>\n            </div>\n            <div>\n                <p>Humidity: <span>{dailyWeather.main.humidity}%</span></p>\n                <p>Wind speed: <span>{dailyWeather.wind.speed}mph</span></p>\n                <p>Description: <span>{dailyWeather.weather[0].description}</span></p>\n            </div>\n        </div>\n    );\n}\n\nexport default DailyDetails;","import DailyForecast from './DailyForecast';\n\nexport default DailyForecast;","import React, { useContext, useState } from 'react';\nimport styles from './DailyForecast.module.scss';\n\nimport weatherContext from '../../../contexts/weatherContext';\n\nimport DailyDetails from './DailyDetails';\n\nconst DailyForecast = ({ dailyWeather }) => {\n    const { convertKelvinToCelsius } = useContext(weatherContext);\n\n    const [showDetail, setShowDetail] = useState(false);\n\n    const detail = showDetail ? <DailyDetails dailyWeather={dailyWeather} /> : <></>;\n\n    const openDetails = () => {\n        setShowDetail(!showDetail);\n    }\n\n    const utcToDay = (utc) => {\n        let utcDate = new Date(utc * 1000);\n        let date = utcDate.toGMTString();\n        let day = date.substring(0, 3);\n        return day;\n    }\n\n    return (\n        <section onClick={openDetails} className={styles.daily}>\n            <section>\n                <article>\n                    <p>{utcToDay(dailyWeather.dt)}</p>\n                    <p>{convertKelvinToCelsius(dailyWeather.main.temp)}&deg;</p>\n                </article>\n                <article>\n                    <div>\n                        <img src={`http://openweathermap.org/img/wn/${dailyWeather.weather[0].icon}@2x.png`} alt={dailyWeather.weather[0].description} />\n                    </div>\n                </article>\n            </section>\n            {detail}\n        </section>\n    );\n}\n\nexport default DailyForecast;","import ForecastWeather from './ForecastWeather';\n\nexport default ForecastWeather;","import React, { useContext } from 'react';\nimport styles from './ForecastWeather.module.scss';\n\nimport WeatherContext from '../../contexts/weatherContext';\n\nimport DailyForecast from './DailyForecast';\n\nconst ForecastWeather = () => {\n    const { forecastWeather } = useContext(WeatherContext);\n\n    return (\n        <section className={styles.forecast}>\n            <div>\n                <p>Click on each to see more detail.</p>\n            </div>\n            <article>\n                {\n                    forecastWeather\n                        ? forecastWeather.map((daily, index) => {\n                            return <DailyForecast dailyWeather={daily} key={index} />\n                        })\n                        : <></>\n                }\n            </article>\n        </section>\n    );\n}\n\nexport default ForecastWeather;","import React from 'react';\nimport styles from './App.module.scss';\n\nimport { WeatherContextProvider } from '../../contexts/weatherContext';\n\nimport CurrentWeather from '../../components/CurrentWeather';\nimport ForecastWeather from '../../components/ForecastWeather';\n\nconst App = () => {\n  return (\n    <section className={styles.App}>\n      <WeatherContextProvider>\n        <CurrentWeather />\n        <ForecastWeather />\n      </WeatherContextProvider>\n      <p>By Annika Chauhan</p>\n    </section>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}